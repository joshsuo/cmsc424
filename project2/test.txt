q1
SELECT flightid, <answer1>
FROM <answer2>
WHERE customerid = 'cust7' or customerid is null
GROUP BY flightid
ORDER BY flightid;


select * from (
select flightid, count(*) from flewon_cust7 group by flightid

select flightid from 
)


select flightid, count(*)
from flewon_cust7
outer join flights
on flewon_cust7.flightid = flights.flightid
group by flightid;

select flightid, count(flewon_cust7.*) 
from flewon_cust7  outer join flights 
on flightid
group by flightid
order by flightid;


select flights.flightid, count(flewon_cust7.*) 
from flewon_cust7 right outer join flights 
on flewon_cust7.flightid = flights.flightid
group by flights.flightid
order by flightid;


select flightid, count(flewon_cust7.*) 
from flewon_cust7  natural right outer join flights 
group by flightid
order by flightid;


q2
SELECT name, count(*)
FROM (SELECT source as airportid FROM flights union all SELECT dest as airportid FROM flights) as airportidunion
	natural join airports
GROUP BY name;


SELECT name, count(*) as total_part, 
    count(SELECT source as airportid FROM flights where airlineid = 'AA' and airportid = airportidunion.airportid
    union all SELECT dest as airportid FROM flights where airlineid = 'AA' and airportid = airportidunion.airportid
    )
FROM (SELECT source as airportid FROM flights union all SELECT dest as airportid FROM flights) as airportidunion
	natural join airports
GROUP BY name;



SELECT name, count(*) as total_part, 
    (SELECT count(*) FROM flights where airlineid = 'AA' and source = airportidunion.airportid) + 
    (SELECT count(*) FROM flights where airlineid = 'AA' and dest = airportidunion.airportid)
FROM (SELECT source as airportid FROM flights union all SELECT dest as airportid FROM flights) as airportidunion
	natural join airports
GROUP BY name;



SELECT name, 
    round(
        cast(cast(coalesce(
        ((SELECT count(*) FROM flights where airlineid = 'AA' and source = airportidunion.airportid) + 
        (SELECT count(*) FROM flights where airlineid = 'AA' and dest = airportidunion.airportid)), 0) 
        as float)
        /
        cast(count(*) as float) as numeric), 2) as ratio
FROM (SELECT source as airportid FROM flights union all SELECT dest as airportid FROM flights) as airportidunion
	natural join airports
GROUP BY airportidunion.airportid, name
order by ratio desc
;


round(cast(cast(coalesce(aa1.cntaa, 0) as float)/cast(total1.cnttotal as float) as numeric), 2) as ratio

q3

SELECT airlineid , count(*)
FROM flights_airports a LEFT JOIN flights_jfk j 
        ON a.flightid = j.flightid
WHERE j.flightid IS NULL
GROUP BY airlineid
HAVING count(*) >= 15;

SELECT airlineid, airportid
FROM flights_airports a LEFT JOIN flights_jfk j 
	ON a.flightid = j.flightid

SELECT airlineid
FROM flights_airports a LEFT JOIN flights_jfk j 
	ON a.flightid = j.flightid
WHERE airlineid NOT IN
(select airlineid from flights_airports where airportid = 'JFK')
group by airlineid
having count(*) >= 15
order by airlineid;

q4
create trigger my_test_trig after insert on my_test_cust 
for each row
begin      
insert into 

create trigger my_test_trig after insert on my_test_cust 
for each row
begin
    insert into my_test_new_cust (customerid, name, birthdate)
    values (new.customerid, new.name, new.birthdate)
end;

CREATE OR REPLACE FUNCTION trg_customers_insert_func()
RETURNS TRIGGER AS $$
BEGIN

    INSERT INTO newcustomers (customerid, name, birthdate)
    VALUES (NEW.customerid, NEW.name, NEW.birthdate);


    IF NEW.frequentflieron IS NOT NULL THEN
        INSERT INTO ffairlines (customerid, airlineid, points)
        VALUES (NEW.customerid, NEW.frequentflieron, 0); -- Assume points start at 0
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_customers_insert
AFTER INSERT ON customers
FOR EACH ROW EXECUTE FUNCTION trg_customers_insert_func();


create function test_func()
returns trigger as $$
begin
    insert into my_test_new_cust (customerid, name, birthdate)
    values (new.customerid, new.name, new.birthdate);

    return null;
end;
$$ language plpgsql;

create trigger my_test_trig
after insert or update or delete on my_test_cust
for each row
execute procedure test_func();



create function test_func()
returns trigger as $$
begin
    if (TG_OP == 'insert') then
        insert into my_test_new_cust (customerid, name, birthdate)
        values (new.customerid, new.name, new.birthdate);

        if new.frequentflieron is not null then
            insert into ffairlines (customerid, frequentflieron, points)
            values (new.customerid, new.frequentflieron, 
                select 
                round(sum(extract(epoch from (local_arrival_time - local_departing_time)) / 60))
                from flights natural join flewon
                where customerid = new.customerid
                and airlineid = new.frequentflieron
            );

    elseif (TG_OP == 'update')

    elseif (TG_OP == 'delete')

        return null;
end;
$$ language plpgsql;

create trigger my_test_trig
after INSERT or UPDATE or DELETE on customers
for each row
execute procedure test_func();



create or replace function test_func()
returns trigger as $$
declare
    points integer
begin
    points := (select 
                round(sum(extract(epoch from (local_arrival_time - local_departing_time)) / 60))
                from flights natural join flewon
                where customerid = new.customerid
                and airlineid = new.frequentflieron);

    if (TG_OP = 'INSERT') then
        insert into newcustomers (customerid, name, birthdate)
        values (new.customerid, new.name, new.birthdate);

        if (new.frequentflieron is not null) then
            insert into ffairlines (customerid, airlineid, points)
            values (new.customerid, new.frequentflieron, points);
        end if;
        
    elsif (TG_OP = 'UPDATE') then
        update newcustomers
        set name = new.name, birthdate = new.birthdate
        where customerid = new.customerid;

        if (old.frequentflieron is distinct from new.frequentflieron) then

            if (new.frequentflieron is null) then
                delete from ffairlines
                where customerid = new.customerid;
            end if;

            if (new.frequentflieron is not null) then
                insert into ffairlines (customerid, airlineid, points)
                values (new.customerid, new.frequentflieron, points);
            end if;
        end if;

    elsif (TG_OP = 'DELETE') then
        delete from newcustomers
        where customerid = old.customerid;

        delete from ffairlines
        where customerid = old.customerid;

    end if;
    
    return null;
end;
$$ language plpgsql;



    

// calc points

select flightid, customerid, airlineid, local_departing_time, local_arrival_time,
extract(epoch from (local_arrival_time - local_departing_time)) / 60
from flights natural join flewon
where customerid = 'cust15' 
and airlineid = 'SW';

select 
round(sum(extract(epoch from (local_arrival_time - local_departing_time)) / 60))
from flights natural join flewon
where customerid = 'cust15' 
and airlineid = 'SW';



insert into customers (customerid, name, birthdate, frequentflieron)                                               
values ('cust15', 'Joshua Suo', '2003-01-09', 'SW');


part 2
select customerid, airlineid, flightdate
from flights natural join flewon
where customerid = 'cust0'
order by flightdate desc, airlineid
limit 1


-- part 1
create or replace function update_new_ff_func()
returns trigger as $$
declare
    points integer;
begin
    points := (select 
                round(sum(extract(epoch from (local_arrival_time - local_departing_time)) / 60))
                from flights natural join flewon
                where customerid = new.customerid
                and airlineid = new.frequentflieron);

    if (TG_OP = 'INSERT') then
        insert into newcustomers (customerid, name, birthdate)
        values (new.customerid, new.name, new.birthdate);

        if (new.frequentflieron is not null) then
            insert into ffairlines (customerid, airlineid, points)
            values (new.customerid, new.frequentflieron, points);
        end if;
        
    elsif (TG_OP = 'UPDATE') then
        update newcustomers
        set name = new.name, birthdate = new.birthdate
        where customerid = new.customerid;

        if (old.frequentflieron is distinct from new.frequentflieron) then

            if (new.frequentflieron is null) then
                delete from ffairlines
                where customerid = new.customerid;
            end if;

            if (new.frequentflieron is not null) then
                insert into ffairlines (customerid, airlineid, points)
                values (new.customerid, new.frequentflieron, points);
            end if;
        end if;

    elsif (TG_OP = 'DELETE') then
        delete from newcustomers
        where customerid = old.customerid;

        delete from ffairlines
        where customerid = old.customerid;

    end if;
    
    return null;
end;
$$ language plpgsql;

create or replace trigger update_new_ff
after INSERT or UPDATE or DELETE on customers
for each row
execute procedure update_new_ff_func();


-- part 2

create or replace function update_cust_func()
returns trigger as $$
declare
    ff character(2);
begin
    ff := (select airlineid
            from flights natural join flewon
            where customerid = new.customerid
            order by flightdate desc, airlineid
            limit 1);

    if (TG_OP = 'INSERT') then
        insert into customers (customerid, name, birthdate, frequentflieron)
        values (new.customerid, new.name, new.birthdate, ff);

    elsif (TG_OP = 'UPDATE') then
        update customers
        set name = new.name, birthdate = new.birthdate
        where customerid = new.customerid;

    elsif (TG_OP = 'DELETE') then
        delete from customers
        where customerid = old.customerid;

    end if;

    return null;
end;
$$ language plpgsql;

create or replace trigger update_cust
after INSERT or UPDATE or DELETE on newcustomers
for each row
execute procedure update_cust_func();




select airlineid
            from flights
            natural join flewon
            where customerid = 'cust15'
            and starts_with(flightid, airlineid)
            order by flightdate desc, airlineid
            limit 1


select airlineid, flightdate
            from flights
            natural join flewon
            where customerid = 'cust109'
            and starts_with(flightid, airlineid)
            order by flightdate desc
            limit 1



select flights.airlineid, flightdate
            from (flights
            natural join flewon)
            natural join ffairlines
            where flewon.customerid = 'cust109'